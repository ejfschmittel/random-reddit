{"version":3,"sources":["App.js","reportWebVitals.js","index.js"],"names":["SUBREDDITS","name","tagline","getRandomPostUrl","subreddit","App","useState","question","setQuestion","description","setDescription","setTagline","setSubreddit","useEffect","loadNewQuestion","a","random","Math","floor","length","url","randomSubreddit","console","log","fetch","then","res","json","data","children","title","selftext","className","class","onClick","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"+OAKMA,EAAa,CACjB,CACEC,KAAM,mBACNC,QAAS,8BAEX,CACED,KAAM,eACNC,QAAS,+BAKPC,EAAmB,SAACC,GAAD,yCAA2CA,EAA3C,iBAoFVC,MAlFf,WAAgB,IAAD,EAGmBC,mBAAS,WAH5B,mBAGNC,EAHM,KAGIC,EAHJ,OAIyBF,mBAAS,IAJlC,mBAING,EAJM,KAIOC,EAJP,OAKiBJ,mBAAS,cAL1B,mBAKNJ,EALM,KAKGS,EALH,OAMqBL,mBAAS,MAN9B,mBAMNF,EANM,KAMKQ,EANL,KASbC,qBAAU,WACRC,MACC,IAGH,IAAMA,EAAe,uCAAG,wCAAAC,EAAA,6DAEhBC,EAASC,KAAKC,MAAMD,KAAKD,SAAWC,KAAKC,MAAMlB,EAAWmB,SAM1DC,EAAMjB,GALNkB,EAAkBrB,EAAWgB,IAKUf,MAC7CqB,QAAQC,IAAIH,GATU,SAUHI,MAAMJ,GAAKK,MAAK,SAAAC,GAAG,OAAIA,EAAIC,UAVxB,OAUhBA,EAVgB,OAWtBL,QAAQC,IAAII,GAXU,EAcGA,EAAK,GAAGC,KAAKC,SAAS,GAAGD,KAA3CE,EAde,EAcfA,MAAMC,EAdS,EAcTA,SAEbvB,EAAYsB,GACZpB,EAAeqB,GAGfpB,EAAWU,EAAgBnB,SAC3BU,EAAaS,EAAgBpB,MArBP,4CAAH,qDAuCrB,OACE,sBAAK+B,UAAU,MAAf,UAEA,sBAAKA,UAAU,QAAf,UACGzB,EAED,sBAAK0B,MAAM,WAAX,gBACM7B,QAIR,qBAAK4B,UAAU,cAAf,SACGvB,IAID,qBAAKuB,UAAU,UAAf,SACG9B,IAGH,sBAAK8B,UAAU,UAAf,UACA,wBAAQE,QA1BO,WACjBpB,KAyB+BkB,UAAU,mBAAvC,sBACE,wBAAQE,QA/BE,WACdpB,KA8B8BkB,UAAU,gBAApC,0BClFOG,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBZ,MAAK,YAAkD,IAA/Ca,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,OCDdO,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1BZ,M","file":"static/js/main.46977244.chunk.js","sourcesContent":["import React, {useState, useEffect} from \"react\"\nimport './App.css';\n\n\n\nconst SUBREDDITS = [\n  {\n    name: \"unpopularopinion\",\n    tagline: \"Is this opinion unpopular?\"\n  },\n  {\n    name: \"changemyview\",\n    tagline: \"Is this opinion unpopular?\"\n  }\n]\n\n\nconst getRandomPostUrl = (subreddit) => `https://www.reddit.com/r/${subreddit}/random.json`\n\nfunction App() {\n\n\n  const [question, setQuestion] = useState(\"Loading\")\n  const [description, setDescription] = useState(\"\")\n  const [tagline, setTagline] = useState(\"Loading...\")\n  const [subreddit, setSubreddit] = useState(null)\n\n\n  useEffect(() => {\n    loadNewQuestion();\n  }, [])\n\n\n  const loadNewQuestion = async () => {\n    // get random subreddit\n    const random = Math.floor(Math.random() * Math.floor(SUBREDDITS.length));\n    const randomSubreddit = SUBREDDITS[random];\n\n    \n    // get random post \n\n    const url = getRandomPostUrl(randomSubreddit.name)\n    console.log(url)\n    const json = await fetch(url).then(res => res.json())\n    console.log(json)\n\n    \n    const {title,selftext} = json[0].data.children[0].data\n\n    setQuestion(title)\n    setDescription(selftext)\n    \n\n    setTagline(randomSubreddit.tagline)\n    setSubreddit(randomSubreddit.name)\n\n  }\n\n\n\n\n\n\n  const onAgree = () => {\n    loadNewQuestion()\n  }\n\n  const onDisagree = () => {\n    loadNewQuestion()\n  }\n\n\n  return (\n    <div className=\"App\">\n      \n    <div className=\"title\">\n      {question}\n\n      <div class=\"subtitle\">\n        /r/{subreddit}\n      </div>\n    </div>\n\n    <div className=\"description\">\n      {description}\n    </div>\n\n\n      <div className=\"tagline\">\n        {tagline}\n      </div>\n\n      <div className=\"buttons\">\n      <button onClick={onDisagree} className=\"button--disagree\">Disagree</button>\n        <button onClick={onAgree} className=\"button--agree\">Agree</button>\n      \n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}